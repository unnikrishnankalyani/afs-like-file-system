syntax = "proto3";

option java_package = "ex.grpc";

package afs;

service AFS {
  rpc afs_MKDIR(MkdirReq) returns (MkdirRes) {}
  rpc afs_RMDIR(RmdirReq) returns (RmdirRes) {}
  rpc afs_READ(ReadReq) returns (ReadRes) {}
  rpc afs_WRITE(WriteReq) returns (WriteRes) {}
  rpc afs_CREATE(CreateReq) returns (CreateRes) {}
  rpc afs_REMOVE (RemoveReq) returns (RemoveRes) {}
  rpc afs_LOOKUP(LookupReq) returns (LookupRes) {}
  rpc afs_SETATTR(SetattrReq) returns (SetattrRes) {}
  rpc afs_GETATTR(GetattrReq) returns (GetattrRes) {}
  rpc afs_COMMIT(CommitReq) returns (CommitRes) {}
  rpc afs_LS(LsReq) returns (stream LsRes){}
  rpc afs_FETCH(FetchRequest) returns (FetchReply){}
  rpc afs_STORE(StoreReq) returns (StoreRes){}
  rpc afs_UNLINK(UnlinkReq) returns (UnlinkRes){}

}

message StoreReq {
  string path = 1;
  int32 size = 2;
  bytes buf = 3;
}

message StoreRes {
  int32 error = 1;
  string reason = 2;
}

message OpenReq{

}

message OpenRes{

}

message FetchRequest {
  string path = 1;
}

message UnlinkReq {
  string path = 1;
}

message UnlinkRes {
  int32 error = 1;
}

message ChmodReq {
  string path = 1;
  uint32 mode = 2; 
}

message ChmodRes {
  int32 error = 1;
}

message FetchReply {
  int32 error = 1;
  string reason = 2;
  int32 size = 3;
  bytes buf = 4;
}

message LsReq {
    string path = 1;
}

message LsRes {
    int32 error = 1;
    string name = 2;
}

message file_attr {
  enum ftype {
    afsREG = 0;
    afsDIR = 1;
  }
  ftype   type = 1;   // file type
  uint64  size = 2;   // file size in bytes.
}

message ReadReq {
  string file = 1;
  uint64 offset = 2;
  uint64 count = 3;
}


message ReadResult_OK {

}

message ReadResult_FAIL {
}

message ReadRes {

}

message MkdirReq {

}

message MkdirRes {
  
}

message RmdirReq {

}

message RmdirRes {

}

message WriteReq {
  
}

message WriteRes {

}

message GetattrReq {
  string path = 1;
}

message GetattrRes {
  uint32   dev = 1;    // ID of device containing file 
  uint32   ino = 2;     // inode number 
  int32   mode = 3;   // protection 
  uint32   nlink = 4;    // number of hard links 
  uint32     uid = 5;     // user ID of owner 
  uint32     gid = 6;     // group ID of owner 
  sint64     size = 7;    // total size, in bytes 
  sint64 blksize = 8; // blocksize for file system I/O 
  sint64  blocks = 9;  // number of 512B blocks allocated 
  int32    atime = 10;   // time of last access 
  int32    mtime = 11;   // time of last modification
  int32    ctime = 12;   // time of last status change
  int32    err = 13; 
}

message SetattrReq {
  string fh = 1;

}


message SetattrRes {

}

message CommitReq {
  string fh = 1;
}

message CommitRes {
 
}

message RemoveReq {
  
}


message RemoveRes {
  
}

message CreateReq {
  string path = 1;
}

message CreateRes {
  int32 ack = 1;
}

message LookupReq {
	
}


message LookupRes {
  
}